###################################################
# About
#
# This R script runs linear regression analysis of
# two time serie from the CUAHSI Water Data Center
###################################################
###################################################
# define metadata, resources, inputs and outputs
#wps.des: id = linear_regression, title = Linear Regression,
# abstract = run linear regression of two time series;
#wps.in: id = x_resource_id, type = string, title = X axis time series resource,
# abstract = CUAHSI resource ID of the first time series,
# minOccurs = 1, maxOccurs = 1;
#wps.in: id = y_resource_id, type = string, title = Y axis time series resource,
# abstract = CUAHSI resource ID of the second time series,
# minOccurs = 1, maxOccurs = 1;
#wps.out: id = output, type = text, title = regression scatter plot values,
# abstract = regression scatter plot values with the regression coefficients;
######################################
# R Correlation Plot Test!           #
######################################
library(httr)
library(WaterML)
library(jsonlite)
#wps.off;
x_resource_id = "cuahsi-wdc-2016-04-12-71940231"
y_resource_id = "cuahsi-wdc-2016-04-12-71940231"
#wps.on;
cuahsi_url = "http://bcc-hiswebclient.azurewebsites.net/CUAHSI/HydroClient/WaterOneFlowArchive/"
url1 = paste0(cuahsi_url, x_resource_id, "/zip")
url2 = paste0(cuahsi_url, y_resource_id, "/zip")
# unzip, download and parse the first file
temp1 = tempfile()
tempdir1 = tempdir()
temp_unzip = tempfile()
GET(url1, write_disk(temp1, overwrite=TRUE))
waterml1 = unzip(temp1, exdir=tempdir1)
values1 = GetValues(waterml1)
plot(DataValue~time, data=values1, type="l")
unlink(temp1)
unlink(waterml1)
unlink(tempdir1)
# unzip, download and parse the second file
temp2 = tempfile()
tempdir2 = tempdir()
temp_unzip2 = tempfile()
GET(url2, write_disk(temp2, overwrite=TRUE))
waterml2 = unzip(temp2, exdir=tempdir2)
values2 = GetValues(waterml2)
lines(DataValue~time, data=values2, type="l", col="red")
# merge the two time series
merged = merge(values1, values2, by="time")
# make regression model
m = lm(DataValue.y~DataValue.x, data=merged)
# get the intercept, slope and Rsquared from the model
intercept = m$coefficients[1]
slope = m$coefficients[2]
rsquared <- round(summary(m)$r.squared, digits=4)
# make scatterplot with regression line
#wps.off;
plot(DataValue.y~DataValue.x, data=merged)
abline(m, col="red")
#wps.on;
# write output data in JSON format
output1 = data.frame(x=merged$DataValue.x, y=merged$DataValue.y)
# remove 'no data' values from the output data
output_valid = output1[complete.cases(output1),]
# name of output data file
output = "output_data.json"
output_json = toJSON(output_valid)
write(output_json, output)
output_json
###################################################
# About
#
# This R script runs linear regression analysis of
# two time serie from the CUAHSI Water Data Center
###################################################
###################################################
# define metadata, resources, inputs and outputs
#wps.des: id = gap_filler, title = Gap Filler Tool,
# abstract = Fills in gaps in a time series
#wps.in: id = resource_id, type = string, title = Time series to process,
# abstract = CUAHSI resource ID of the time series,
# minOccurs = 1, maxOccurs = 1;
#wps.out: id = output, type = text, title = gap filled time series values,
# abstract = plot values of the gap filled time series;
######################################
# CUAHSI Gap Filler Tool          #
######################################
library(WaterML)
library(xts)
library(httr)
library(jsonlite)
resource_id = "cuahsi-wdc-2016-04-12-71940231"
cuahsi_url = "http://bcc-hiswebclient.azurewebsites.net/CUAHSI/HydroClient/WaterOneFlowArchive/"
url1 = paste0(cuahsi_url, resource_id, "/zip")
temp1 = tempfile()
tempdir1 = tempdir()
temp_unzip = tempfile()
GET(url1, write_disk(temp1, overwrite=TRUE))
waterml1 = unzip(temp1, exdir=tempdir1)
values1 = GetValues(waterml1)
plot(DataValue~time, data=values1, type="l")
unlink(temp1)
unlink(waterml1)
unlink(tempdir1)
#url <- 'http://hydrodata.info/chmi-h/cuahsi_1_1.asmx/GetValuesObject?location=CHMI-H:140&variable=CHMI-H:TEPLOTA&startDate=2015-07-01&endDate=2015-07-10&authToken='
#url<- 'http://hydrodata.info/chmi-h/cuahsi_1_1.asmx/GetValuesObject?location=CHMI-H:140&variable=CHMI-H:TEPLOTA&startDate=2015-07-01&endDate=2015-07-10&authToken='
#url <-'http://hydrodata.info/chmi-d/cuahsi_1_1.asmx/GetValuesObject?location=CHMI-D:171~variable!CHMI-D:PRUTOK~startDate!2014-07-01~endDate!2015-07-30~authToken!'
# server <- gsub("!", "=", url)
# server <- gsub("~", "&", server)
# values <- GetValues(server)
#get time series object
ts <- xts(values1$DataValue, order.by = values1$time)
#convert to weekly
date<- as.Date(as.POSIXlt(time(ts)))
value <- as.double(ts)
data <- data.frame(date,value)
final <- xts(data$value, order.by = date)
final_ts<-na.approx(final)
# output <- "Modified Values"
# write.zoo(final_ts,output)
# plot(final_ts)
#plot(ts)
.# write output data in JSON format
output1 = data.frame(date=index(final_ts),values = final_ts,row.names = NULL)
# remove 'no data' values from the output data
output_valid = output1[complete.cases(output1),]
# name of output data file
output = "output_data.json"
output_json = toJSON(list(stats=data.frame(rsquared=rsquared, intercept=intercept, slope=slope),
data=setNames(output_valid, NULL)))
write(output_json, output)
output_json
output1 = data.frame(date=index(final_ts),values = final_ts,row.names = NULL)
###################################################
# About
#
# This R script runs linear regression analysis of
# two time serie from the CUAHSI Water Data Center
###################################################
###################################################
# define metadata, resources, inputs and outputs
#wps.des: id = linear_regression, title = Linear Regression,
# abstract = run linear regression of two time series;
#wps.in: id = x_resource_id, type = string, title = X axis time series resource,
# abstract = CUAHSI resource ID of the first time series,
# minOccurs = 1, maxOccurs = 1;
#wps.in: id = y_resource_id, type = string, title = Y axis time series resource,
# abstract = CUAHSI resource ID of the second time series,
# minOccurs = 1, maxOccurs = 1;
#wps.out: id = output, type = text, title = regression scatter plot values,
# abstract = regression scatter plot values with the regression coefficients;
######################################
# R Correlation Plot Test!           #
######################################
library(httr)
library(WaterML)
library(jsonlite)
#wps.off;
x_resource_id = "cuahsi-wdc-2016-04-12-71940231"
y_resource_id = "cuahsi-wdc-2016-04-12-71940231"
#wps.on;
cuahsi_url = "http://qa-webclient-solr.azurewebsites.net/CUAHSI/HydroClient/WaterOneFlowArchive/"
url1 = paste0(cuahsi_url, x_resource_id, "/zip")
url2 = paste0(cuahsi_url, y_resource_id, "/zip")
# unzip, download and parse the first file
temp1 = tempfile()
tempdir1 = tempdir()
temp_unzip = tempfile()
GET(url1, write_disk(temp1, overwrite=TRUE))
waterml1 = unzip(temp1, exdir=tempdir1)
values1 = GetValues(waterml1)
plot(DataValue~time, data=values1, type="l")
unlink(temp1)
unlink(waterml1)
unlink(tempdir1)
# unzip, download and parse the second file
temp2 = tempfile()
tempdir2 = tempdir()
temp_unzip2 = tempfile()
GET(url2, write_disk(temp2, overwrite=TRUE))
waterml2 = unzip(temp2, exdir=tempdir2)
values2 = GetValues(waterml2)
lines(DataValue~time, data=values2, type="l", col="red")
# merge the two time series
merged = merge(values1, values2, by="time")
# make regression model
m = lm(DataValue.y~DataValue.x, data=merged)
# get the intercept, slope and Rsquared from the model
intercept = m$coefficients[1]
slope = m$coefficients[2]
rsquared <- round(summary(m)$r.squared, digits=4)
# make scatterplot with regression line
#wps.off;
plot(DataValue.y~DataValue.x, data=merged)
abline(m, col="red")
#wps.on;
# write output data in JSON format
output1 = data.frame(x=merged$DataValue.x, y=merged$DataValue.y)
# remove 'no data' values from the output data
output_valid = output1[complete.cases(output1),]
# name of output data file
output = "output_data.json"
output_json = toJSON(output_valid)
write(output_json, output)
output_json
install.packages("httr")
install.packages("WaterML")
install.packages("jsonlite")
library(httr)
library(WaterML)
library(jsonlite)
#wps.off;
x_resource_id = "cuahsi-wdc-2016-04-12-71940231"
y_resource_id = "cuahsi-wdc-2016-04-12-71940231"
#wps.on;
cuahsi_url = "http://qa-webclient-solr.azurewebsites.net/CUAHSI/HydroClient/WaterOneFlowArchive/"
url1 = paste0(cuahsi_url, x_resource_id, "/zip")
url2 = paste0(cuahsi_url, y_resource_id, "/zip")
# unzip, download and parse the first file
temp1 = tempfile()
tempdir1 = tempdir()
temp_unzip = tempfile()
GET(url1, write_disk(temp1, overwrite=TRUE))
waterml1 = unzip(temp1, exdir=tempdir1)
values1 = GetValues(waterml1)
plot(DataValue~time, data=values1, type="l")
GET(url1, write_disk(temp1, overwrite=TRUE))
waterml1 = unzip(temp1, exdir=tempdir1)
values1 = GetValues(waterml1)
plot(DataValue~time, data=values1, type="l")
unlink(temp1)
unlink(waterml1)
unlink(tempdir1)
# unzip, download and parse the second file
temp2 = tempfile()
tempdir2 = tempdir()
temp_unzip2 = tempfile()
GET(url2, write_disk(temp2, overwrite=TRUE))
waterml2 = unzip(temp2, exdir=tempdir2)
values2 = GetValues(waterml2)
lines(DataValue~time, data=values2, type="l", col="red")
GET(url2, write_disk(temp2, overwrite=TRUE))
###################################################
# About
#
# This R script runs linear regression analysis of
# two time serie from the CUAHSI Water Data Center
###################################################
###################################################
# define metadata, resources, inputs and outputs
#wps.des: id = linear_regression, title = Linear Regression,
# abstract = run linear regression of two time series;
#wps.in: id = x_resource_id, type = string, title = X axis time series resource,
# abstract = CUAHSI resource ID of the first time series,
# minOccurs = 1, maxOccurs = 1;
#wps.in: id = y_resource_id, type = string, title = Y axis time series resource,
# abstract = CUAHSI resource ID of the second time series,
# minOccurs = 1, maxOccurs = 1;
#wps.out: id = output, type = text, title = regression scatter plot values,
# abstract = regression scatter plot values with the regression coefficients;
######################################
# R Correlation Plot Test!           #
######################################
library(httr)
library(WaterML)
library(jsonlite)
#wps.off;
x_resource_id = "cuahsi-wdc-2016-06-28-56240983"
y_resource_id = "cuahsi-wdc-2016-06-28-56240983"
#wps.on;
cuahsi_url = "http://qa-webclient-solr.azurewebsites.net/CUAHSI/HydroClient/WaterOneFlowArchive/"
url1 = paste0(cuahsi_url, x_resource_id, "/zip")
url2 = paste0(cuahsi_url, y_resource_id, "/zip")
# unzip, download and parse the first file
temp1 = tempfile()
tempdir1 = tempdir()
temp_unzip = tempfile()
GET(url1, write_disk(temp1, overwrite=TRUE))
waterml1 = unzip(temp1, exdir=tempdir1)
values1 = GetValues(waterml1)
plot(DataValue~time, data=values1, type="l")
unlink(temp1)
unlink(waterml1)
unlink(tempdir1)
# unzip, download and parse the second file
temp2 = tempfile()
tempdir2 = tempdir()
temp_unzip2 = tempfile()
GET(url2, write_disk(temp2, overwrite=TRUE))
waterml2 = unzip(temp2, exdir=tempdir2)
values2 = GetValues(waterml2)
lines(DataValue~time, data=values2, type="l", col="red")
# merge the two time series
merged = merge(values1, values2, by="time")
# make regression model
m = lm(DataValue.y~DataValue.x, data=merged)
# get the intercept, slope and Rsquared from the model
intercept = m$coefficients[1]
slope = m$coefficients[2]
rsquared <- round(summary(m)$r.squared, digits=4)
# make scatterplot with regression line
#wps.off;
plot(DataValue.y~DataValue.x, data=merged)
abline(m, col="red")
#wps.on;
# write output data in JSON format
output1 = data.frame(x=merged$DataValue.x, y=merged$DataValue.y)
# remove 'no data' values from the output data
output_valid = output1[complete.cases(output1),]
# name of output data file
output = "output_data.json"
output_json = toJSON(output_valid)
write(output_json, output)
output_json
